@RequestMapping(value = "/viewpdf.do", method = RequestMethod.GET)
	public void show_detail(@ModelAttribute("VO") searchVO VO,HttpServletRequest request, HttpServletResponse response) {
		
		String url = ArgosPropertiesService.getString("url");
		SearchUtil sf = new SearchUtil();
		StringBuilder searchQuery = new StringBuilder();
		StringBuilder searchClause = new StringBuilder();
		
		searchQuery.append(url);
		searchQuery.append("search?select=file_path,no");
		searchQuery.append("&from=jeonbuk");
		searchQuery.append("&where=(no=" + VO.getNo() + ")");
		searchQuery.append("&limit=1");
		searchQuery.append(searchClause.toString());
		
		JSONObject obj = sf.jsonGet(searchQuery.toString());
		
		FileInputStream fis = null;
		BufferedOutputStream bos = null;

		String pdfFileName = obj.getJSONArray("search").getJSONObject(0).getString("file_path");
		
		try {

		 File pdfFile = new File(pdfFileName);

		 //클라이언트 브라우져에서 바로 보는 방법(헤더 변경)
		 response.setHeader("X-Frame-Options", "sameorigin");
		 response.setContentType("application/pdf");

		 //파일 읽고 쓰는 건 일반적인 Write방식이랑 동일합니다. 다만 reponse 출력 스트림 객체에 write.
		 fis = new FileInputStream(pdfFile);
		 int size = fis.available(); //지정 파일에서 읽을 수 있는 바이트 수를 반환
		 byte[] buf = new byte[size]; //버퍼설정
		 int readCount = fis.read(buf);

		 response.flushBuffer();
		 bos = new BufferedOutputStream(response.getOutputStream());
		 bos.write(buf, 0, readCount);
		 bos.flush();

		} catch(Exception e) {
			
		 e.printStackTrace();
		 
		} finally {
			try {
				if (fis != null) fis.close(); //close는 꼭! 반드시!
				if (bos != null) bos.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		
	}